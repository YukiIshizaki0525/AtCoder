s
v l
s
v l
v ;
s
index
v l
s
arr[index]-1
s
index
v l
s
index
v l
s
index
s
v l
s
v l
s
        exit
        puts cnt
    if index == 1
N.times do |i|
index = 0
N = gets.to_i
exit
index
s
v l
s
index
s
index
s
exit
v l
s
v l
s
v l
s
exit
v l
s
c[0]
c[-]
v l
s
exit
v l
s
v l
s
exit
n = 3
goal = 7
customers = [[5, 7], [2, 6], [8, 10]]
b_customers = [7, 6, 10]
ans = 0
exit
s
v l
exit
arr[(i*4)-2]
arr[(i*4)-2
v l
s
arr[(i*4)-2]
v l
s
v l
exit
arr
arr.delete(1)
a - arr
arr - a
a
arr
exit
v l
s
v l
s
v l
s
v l
s
v l
s
v l
s
exit
s
exit
alice[:r]
alice[r]
v l
s
a
s
exit
v l
s
v l
s
exit
exir
s
exit
v l
s
v l
s
v l
s
v l
s
v l
s
exit
y = alice[:w] ==
s
exit
s
exit
s
[b , m-b].min
m
_1
 a.count {_1 < x}
v l
s
exit
s
exit
v l
s
v l
s
v l
s
v l
s
v l
s
exit
tail - head + 1
v l
s[head..tail]
s
v l
vl
s[head..tail].count("^atgc")
s[head..tail].count("^atgc").zero? 
s[head..tail]
v l
s
v l
s
s[head..tail]
v l
v l;
s
v l
s
exit
<<<<<<< HEAD
11**2
Integer.sqrt(124)
Integer.sqrt(123)
Integer.sqrt(122)
Integer.sqrt(n)
v l
s
exit
v l
s
v l
s
v l
s
card.transpose
card.any?(&:all?)
card.any?
s
v l
exit
v l
s
v l
s
v l
s
v l
exit
s
exit
(H * W).divmod(2)
s
exit
s
v l
=======
s
s[i..i+2]
==
s
>>>>>>> master
exit
a.sort
v l
s
copy
v l
s
v l
s
v l
s
exit
v l
s
v l
s
v l
copy.shift
copy << copy.shift
v l
s
v l
s
v l
copy.shift
s
a
v l
s
exit
puts(sorted[0]) #=> 最小
sorted = a.sort
end
  copy.join
  copy << copy.shift #=> 最初の要素(copy[0])を最後に移動
a = s.length.times.map do
s = gets.chomp.split(//)
byebug
require 'byebug'
exit
(x * 1.08)
v l
s
v l
